{"version":3,"sources":["AppUI.tsx","store/actionCreators.tsx","store/actionTypes.tsx","store/reducer.tsx","store/sagas.tsx","store/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AppUI","props","id","placeholder","value","inputVal","onChange","e","inputChange","target","type","onClick","sub","bordered","dataSource","data","renderItem","item","index","Item","delItem","init","defaultState","copyState","state","JSON","parse","stringify","Saga","initSaga","takeEvery","axios","get","res","action","put","console","log","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","sagaMiddleware","createSagaMiddleware","enhancer","applyMiddleware","thunk","store","createStore","newState","i","push","splice","run","App","getState","dataChange","bind","subscribe","dispatch","this","change","setState","submit","del","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.079cc826.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\nimport 'antd/dist/antd.css';\nimport { Input, Button, List } from 'antd';\nimport './AppUI.less';\n\ninterface Props {\n    inputVal: string;\n    data: string[];\n    inputChange: Function;\n    sub: Function;\n    delItem: Function;\n}\n\nfunction AppUI(props: Props) {\n    return (\n        <Fragment>\n            <Input\n                id='antdInput'\n                placeholder='输入内容'\n                value={props.inputVal}\n                onChange={(e) => props.inputChange(e.target.value)}\n            />\n            <Button\n                id='antdButton'\n                type='primary'\n                onClick={() => props.sub(props.inputVal)}\n            >提交</Button>\n            <List\n                id='antdList'\n                bordered\n                dataSource={props.data}\n                renderItem={(item, index) => (\n                    <List.Item\n                        id='antdItem'\n                        onClick={() => props.delItem(index)}\n                    >\n                        {item}\n                    </List.Item>\n                )} />\n        </Fragment>\n    )\n}\n\nexport default AppUI;","import { INIT, DEL, CHANGE, SUBMIT, SAGAINIT} from \"./actionTypes\"\nimport axios from \"axios\"\n\nexport const initSaga = () => ({\n    type: SAGAINIT\n})\n\nexport const init = (data: any) => ({\n    type: INIT,\n    data\n})\n\nexport const getData = () => {\n    return (dispatch: (arg0: { type: string; data: any }) => void) => {\n        axios.get('/api')\n            .then((res) => {\n                const data = res.data.data;\n                const action = init(data);\n                dispatch(action);\n            })\n    }\n}\n\nexport const change = (value: string) => {\n    return {\n        type: CHANGE,\n        value\n    }\n}\n\nexport const submit = (value: string) => {\n    return {\n        type: SUBMIT,\n        value\n    }\n}\n\nexport const del = (index: any) => {\n    return {\n        type: DEL,\n        index\n    }\n}","export const SAGAINIT = 'saga_init';\nexport const INIT = 'init';\nexport const CHANGE = 'change';\nexport const SUBMIT = 'submit';\nexport const DEL = 'del';","import { INIT, DEL, CHANGE, SUBMIT } from \"./actionTypes\";\n\ninterface State {\n    inputVal: string;\n    data: string[];\n}\n\nconst defaultState: State = {\n    inputVal: '',\n    data: []\n}\n\nconst copyState = (state: State) => {\n    return JSON.parse(JSON.stringify(state));\n}\n\nexport default (state = defaultState, action: any) => {\n    if (action.type === INIT) {\n        const newState = copyState(state);\n        for (let i in action.data) {\n            newState.data.push(action.data[i]);\n        }\n        return newState;\n    }\n    if (action.type === CHANGE) {\n        const newState = copyState(state);\n        newState.inputVal = action.value;\n        return newState;\n    }\n    if (action.type === SUBMIT) {\n        const newState = copyState(state);\n        newState.data.push(action.value);\n        newState.inputVal = '';\n        return newState;\n    }\n    if (action.type === DEL) {\n        const newState = copyState(state);\n        newState.data.splice(action.index, 1);\n        return newState;\n    }\n    return state;\n}","import { takeEvery, put } from 'redux-saga/effects';\nimport { SAGAINIT } from './actionTypes';\nimport axios from 'axios';\nimport { init } from './actionCreators';\n\nfunction* Saga() {\n    yield takeEvery(\n        SAGAINIT,\n        initSaga\n    );\n}\n\nfunction* initSaga() {\n    try {\n        const res = yield axios.get('/api')\n        const action = init(res.data.data);\n        yield put(action);\n    } catch (e) {\n        console.log(e);\n    }\n}\n\nexport default Saga;","import { createStore, compose, applyMiddleware } from 'redux';\nimport reducer from './reducer';\nimport thunk from 'redux-thunk';\nimport createSagaMiddleware from 'redux-saga';\nimport Saga from './sagas';\n\nconst composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst enhancer = composeEnhancers(\n    applyMiddleware(thunk, sagaMiddleware)\n);\n\nconst store = createStore(\n    reducer,\n    enhancer\n);\n\nsagaMiddleware.run(Saga);\n\nexport default store;","import React, { Component } from 'react';\nimport AppUI from './AppUI';\nimport { del, change, submit, initSaga } from './store/actionCreators';\nimport store from './store';\n\ninterface State {\n    inputVal: string;\n    data: string[];\n}\n\nclass App extends Component<object, State> {\n    constructor(props: object) {\n        super(props)\n        this.state = store.getState();\n        this.dataChange = this.dataChange.bind(this);\n        this.delItem = this.delItem.bind(this);\n        this.sub = this.sub.bind(this);\n        store.subscribe(this.dataChange);\n    }\n    componentDidMount() {\n        const action = initSaga();\n        store.dispatch(action);\n    }\n    render() {\n        return (\n            <AppUI\n                inputVal={this.state.inputVal}\n                inputChange={this.inputChange}\n                data={this.state.data}\n                sub={this.sub}\n                delItem={this.delItem}\n            />\n        )\n    }\n    inputChange(value: string) {\n        const action = change(value);\n        store.dispatch(action);\n    }\n    dataChange() {\n        this.setState(store.getState());\n    }\n    sub(value: string) {\n        const action = submit(value);\n        store.dispatch(action);\n    }\n    delItem(index: any) {\n        const action = del(index);\n        store.dispatch(action);\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}