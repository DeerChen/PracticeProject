{"version":3,"sources":["AppUI.tsx","store/reducer.tsx","store/index.tsx","store/actionTypes.tsx","App.tsx","store/actionCreators.tsx","serviceWorker.ts","index.tsx"],"names":["AppUI","props","id","placeholder","value","inputVal","onChange","e","inputChange","target","onClick","sub","bordered","dataSource","data","renderItem","item","index","Item","delItem","defaultState","copyState","state","JSON","parse","stringify","enhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","thunk","store","createStore","action","type","newState","i","push","splice","App","getState","dataChange","bind","subscribe","dispatch","axios","get","then","res","init","this","change","setState","submit","del","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.16828a0e.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\nimport 'antd/dist/antd.css';\nimport { Input, Button, List } from 'antd';\nimport './AppUI.less';\n\ninterface Props {\n    inputVal: string;\n    data: string[];\n    inputChange: (value: string) => void;\n    sub: (e: any) => void;\n    delItem: (index: any) => void;\n}\n\nfunction AppUI(props: Props) {\n    return (\n        <Fragment>\n            <Input\n                id='antdInput'\n                placeholder='输入内容'\n                value={props.inputVal}\n                onChange={(e) => props.inputChange(e.target.value)}\n            />\n            <Button\n                onClick={() => props.sub(props.inputVal)}\n            >提交</Button>\n            <List\n                id='antdList'\n                bordered\n                dataSource={props.data}\n                renderItem={(item, index) => (\n                    <List.Item\n                        id='antdItem'\n                        onClick={() => props.delItem(index)}\n                    >\n                        {item}\n                    </List.Item>\n                )} />\n        </Fragment>\n    )\n}\n\nexport default AppUI;","import { INIT, DEL, CHANGE, SUBMIT } from \"./actionTypes\";\nimport axios from 'axios';\n\ninterface State {\n    inputVal: string;\n    data: string[];\n}\n\nconst defaultState: State = {\n    inputVal: '',\n    data: []\n}\n\nconst copyState = (state: State) => {\n    return JSON.parse(JSON.stringify(state));\n}\n\nexport default (state = defaultState, action: any) => {\n    if (action.type === INIT) {\n        const newState = copyState(state);\n        for (let i in action.data){\n            newState.data.push(action.data[i]);\n        }\n        return newState;\n    }\n    if (action.type === CHANGE) {\n        const newState = copyState(state);\n        newState.inputVal = action.value;\n        return newState;\n    }\n    if (action.type === SUBMIT) {\n        const newState = copyState(state);\n        newState.data.push(action.value);\n        newState.inputVal='';\n        return newState;\n    }\n    if (action.type === DEL) {\n        const newState = copyState(state);\n        newState.data.splice(action.index, 1);\n        return newState;\n    }\n    return state;\n}","import { createStore, compose, applyMiddleware } from 'redux';\nimport reducer from './reducer';\nimport thunk from 'redux-thunk';\n\nconst composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst enhancer = composeEnhancers(\n    applyMiddleware(thunk)\n);\n\nconst store = createStore(\n    reducer,\n    enhancer\n);\n\nexport default store;","export const INIT = 'init';\nexport const CHANGE = 'change';\nexport const SUBMIT = 'submit';\nexport const DEL = 'del';","import React, { Component } from 'react';\nimport AppUI from './AppUI';\nimport { del, change, submit, getData } from './store/actionCreators';\nimport store from './store';\n\ninterface State {\n    inputVal: string;\n    data: string[];\n}\n\nclass App extends Component<object, State> {\n    constructor(props: object) {\n        super(props)\n        this.state = store.getState();\n        this.dataChange = this.dataChange.bind(this);\n        this.delItem = this.delItem.bind(this);\n        this.sub = this.sub.bind(this);\n        store.subscribe(this.dataChange);\n    }\n    componentDidMount() {\n        const action = getData();\n        store.dispatch(action);\n    }\n    render() {\n        return (\n            <AppUI\n                inputVal={this.state.inputVal}\n                inputChange={this.inputChange}\n                data={this.state.data}\n                sub={this.sub}\n                delItem={this.delItem}\n            />\n        )\n    }\n    inputChange(value: string) {\n        const action = change(value);\n        store.dispatch(action);\n    }\n    dataChange() {\n        this.setState(store.getState());\n    }\n    sub(value: string) {\n        const action = submit(value);\n        store.dispatch(action);\n    }\n    delItem(index: any) {\n        const action = del(index);\n        store.dispatch(action);\n    }\n}\n\nexport default App;","import { INIT, DEL, CHANGE, SUBMIT } from \"./actionTypes\"\nimport axios from \"axios\"\n\nconst init = (data: any) => ({\n    type: INIT,\n    data\n})\n\nexport const getData = () => {\n    return (dispatch: any) => {\n        axios.get('/api')\n            .then((res) => {\n                const data = res.data.data;\n                const action = init(data);\n                dispatch(action);\n            })\n    }\n}\n\nexport const change = (value: string) => {\n    return {\n        type: CHANGE,\n        value\n    }\n}\n\nexport const submit = (value: string) => {\n    return {\n        type: SUBMIT,\n        value\n    }\n}\n\nexport const del = (index: any) => {\n    return {\n        type: DEL,\n        index\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}