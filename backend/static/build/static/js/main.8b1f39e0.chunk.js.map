{"version":3,"sources":["store/actionTypes.tsx","TodoList.js","store/actionCreators.tsx","serviceWorker.ts","store/reducer.tsx","store/index.tsx","index.tsx"],"names":["DEL","connect","store","inputVal","list","dispatch","valueChange","e","action","type","value","target","valChange","submit","delItem","index","del","props","onChange","onClick","map","item","key","Boolean","window","location","hostname","match","defaultState","copyState","state","JSON","parse","stringify","createStore","newState","push","splice","App","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yMAEaA,EAAM,WC0DJC,G,MAAAA,aAxBS,SAACC,GACrB,MAAO,CACHC,SAAUD,EAAMC,SAChBC,KAAMF,EAAME,SAIO,SAACC,GACxB,MAAO,CACHC,YADG,SACSC,GACR,IAAMC,EC5CO,SAACD,GAAD,MAAsC,CAC3DE,KFHuB,eEIvBC,MAAOH,EAAEI,OAAOD,OD0COE,CAAUL,GACzBF,EAASG,IAEbK,OALG,WAOCR,EC5Cc,CACtBI,KFPkB,YCoDdK,QATG,SASKC,GACJ,IAAMP,EC3CC,SAACO,GAAD,MAAiB,CAChCN,KAAMT,EACNe,SDyCuBC,CAAID,GACnBV,EAASG,OAKNP,EAvDE,SAACgB,GAAW,IACjBd,EAAiDc,EAAjDd,SAAUG,EAAuCW,EAAvCX,YAAaO,EAA0BI,EAA1BJ,OAAQT,EAAkBa,EAAlBb,KAAMU,EAAYG,EAAZH,QAC7C,OACI,6BACI,6BACI,2BACIJ,MAAOP,EACPe,SAAUZ,IAEd,4BACIa,QAASN,GADb,iBAIJ,4BAEQT,EAAKgB,KAAI,SAACC,EAAMN,GACZ,OACI,wBACIO,IAAKP,EACLI,QAAS,kBAAML,EAAQC,KAEtBM,YEdbE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCXAC,EAAsB,CACxBzB,SAAU,GACVC,KAAM,CAAC,eAAM,eAAM,uBAGjByB,EAAY,SAACC,GACf,OAAOC,KAAKC,MAAMD,KAAKE,UAAUH,KCNtB5B,EAJDgC,aDaC,WAAwC,IAAvCJ,EAAsC,uDAA9BF,EAAcpB,EAAgB,uCAClD,GJjBuB,iBIiBnBA,EAAOC,KAAsB,CAC7B,IAAM0B,EAAWN,EAAUC,GAE3B,OADAK,EAAShC,SAAWK,EAAOE,MACpByB,EAEX,GJrBkB,WIqBd3B,EAAOC,KAAiB,CACxB,IAAM0B,EAAWN,EAAUC,GAG3B,OAFAK,EAAS/B,KAAKgC,KAAKD,EAAShC,UAC5BgC,EAAShC,SAAW,GACbgC,EAEX,GAAI3B,EAAOC,OAAST,EAAK,CACrB,IAAMmC,EAAWN,EAAUC,GAE3B,OADAK,EAAS/B,KAAKiC,OAAO7B,EAAOO,MAAO,GAC5BoB,EAEX,OAAOL,KEzBLQ,EACF,kBAAC,IAAD,CAAUpC,MAAOA,GACb,kBAAC,EAAD,OAIRqC,IAASC,OACLF,EACAG,SAASC,eAAe,SH2HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.8b1f39e0.chunk.js","sourcesContent":["export const VALUECHANGE = 'value_change';\nexport const SUBMIT = 'submit';\nexport const DEL = 'del_item';","import React from 'react';\nimport { connect } from 'react-redux';\nimport { valChange, sub, del } from './store/actionCreators';\nimport './TodoList.less';\n\nconst TodoList = (props) => {\n    const { inputVal, valueChange, submit, list, delItem } = props;\n    return (\n        <div>\n            <div>\n                <input\n                    value={inputVal}\n                    onChange={valueChange}\n                />\n                <button\n                    onClick={submit}\n                >提交</button>\n            </div>\n            <ul>\n                {\n                    list.map((item, index)=>{\n                        return (\n                            <li\n                                key={index}\n                                onClick={() => delItem(index)}\n                            >\n                                {item}\n                            </li>\n                        )\n                    })\n                }\n            </ul>\n        </div>\n    )\n}\n\nconst mapStateToProps = (store) => {\n    return {\n        inputVal: store.inputVal,\n        list: store.list\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        valueChange(e) {\n            const action = valChange(e);\n            dispatch(action);\n        },\n        submit(){\n            const action = sub();\n            dispatch(action);\n        },\n        delItem(index){\n            const action = del(index);\n            dispatch(action);\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoList);","import { VALUECHANGE, SUBMIT, DEL } from './actionTypes';\n\nexport const valChange = (e: { target: { value: any; }; }) => ({\n    type: VALUECHANGE,\n    value: e.target.value\n});\n\nexport const sub = () => ({\n    type: SUBMIT\n});\n\nexport const del = (index: any) => ({\n    type: DEL,\n    index\n});","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { VALUECHANGE, SUBMIT, DEL } from './actionTypes';\n\ninterface State {\n    inputVal: string;\n    list: string[];\n}\n\nconst defaultState: State = {\n    inputVal: '',\n    list: ['吃饭', '睡觉', '打豆豆']\n}\n\nconst copyState = (state: State) => {\n    return JSON.parse(JSON.stringify(state));\n}\n\nexport default (state = defaultState, action: any) => {\n    if (action.type === VALUECHANGE) {\n        const newState = copyState(state);\n        newState.inputVal = action.value;\n        return newState;\n    }\n    if (action.type === SUBMIT) {\n        const newState = copyState(state);\n        newState.list.push(newState.inputVal);\n        newState.inputVal = '';\n        return newState;\n    }\n    if (action.type === DEL) {\n        const newState = copyState(state);\n        newState.list.splice(action.index, 1);\n        return newState;\n    }\n    return state;\n}","import { createStore } from 'redux';\nimport reducer from './reducer';\n\nconst store = createStore(\n    reducer\n);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport TodoList from './TodoList.js';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nconst App = (\n    <Provider store={store}>\n        <TodoList />\n    </Provider>\n)\n\nReactDOM.render(\n    App,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}